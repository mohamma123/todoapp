{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoItem.js","components/TodoList.js","components/TodoEntry.js","components/TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","Object","classCallCheck","this","id","initializerDefineProperty","_descriptor","_descriptor2","Math","floor","Date","toString","active","observable","action","todoStore","TodoStore","moods","ALL","ACTIVE","COMPLETED","TodoStore_descriptor","TodoStore_descriptor2","mainList","mood","addTodo","current_mood","arguments","length","undefined","todos","filter","todo","tempNewTask","push","changeMood","i","TodoItem","observer","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","handleCheckBoxClick","bind","assertThisInitialized","handleDestroyClick","setState","event","toggleTodo","target","getAttribute","removeTodo","_this2","react_default","a","createElement","className","concat","type","todoid","checked","onClick","Component","TodoList","map","components_TodoItem","TodoEntry","value","e","keyCode","preventDefault","placeholder","onChange","onKeyDown","handleKeyDown","TodoFooter","clearCompleted","App","components_TodoEntry","components_TodoList","components_TodoFooter","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.83873285.chunk.js","sourcesContent":["import {observable, action} from 'mobx'\n\nexport default class TodoModel {\n    store\n    id\n    @observable title\n    @observable active\n\n    constructor(store, title) {\n        this.id = title + (Math.floor((new Date())/1000)).toString()\n        this.store = store\n        this.title = title\n        this.active = true\n    }\n\n    @action\n    toggle() {\n        this.active = !this.active\n    }\n}\n","import {observable, action, computed} from 'mobx'\nimport TodoModel from \"./TodoModel\";\n\nclass TodoStore {\n\n    moods = {\n        ALL: 'all',\n        ACTIVE: 'active',\n        COMPLETED: 'completed'\n    }\n\n    @observable todos = []\n    @observable mood = ''\n    mainList = []\n\n    constructor() {\n        this.mood  = this.moods.ALL\n        this.addTodo(\"test1\")\n        this.addTodo(\"test2\")\n    }\n\n    @action\n    changeMood(current_mood = this.mood) {\n        this.mood = current_mood\n        switch (this.mood) {\n            case this.moods.ALL:\n                this.todos = this.mainList\n                break;\n            case this.moods.ACTIVE:\n                this.todos = this.mainList.filter(todo => todo.active === true)\n                break;\n            case this.moods.COMPLETED:\n                this.todos = this.mainList.filter(todo => todo.active === false)\n                break;\n        }\n    }\n\n    @action\n    addTodo(title) {\n        let tempNewTask = new TodoModel(this, title)\n        this.mainList.push(tempNewTask)\n        this.changeMood()\n    }\n\n    @action\n    clearCompleted() {\n        this.mainList = this.mainList.filter(todo => todo.active === true)\n        this.todos = this.mainList\n    }\n\n\n    @action\n    removeTodo(id) {\n        this.mainList = this.mainList.filter(\n            (todo) => {\n                return !(todo.id === id)\n            }\n        )\n        this.changeMood()\n    }\n\n    @action\n    toggleTodo(id) {\n        for (var i in this.mainList) {\n            if (this.mainList[i].id === id) {\n                this.mainList[i].active = !this.mainList[i].active;\n                break; //Stop this loop, we found it!\n            }\n        }\n        this.changeMood()\n    }\n}\n\n\nconst todoStore = new TodoStore()\nexport default todoStore\n","import React, {Component} from 'react'\nimport todoStore from '../stores/TodoStore'\nimport {observer} from \"mobx-react\";\n\n@observer\nclass TodoItem extends Component{\n\n    // eslint-disable-next-line no-useless-constructor\n    constructor(props) {\n        super(props);\n        // Don't call this.setState() here!\n        this.state = { active : this.props.active };\n        this.handleCheckBoxClick = this.handleCheckBoxClick.bind(this);\n        this.handleDestroyClick = this.handleDestroyClick.bind(this);\n        this.setState({ active : this.props.active });\n    }\n\n    handleCheckBoxClick(event) {\n        this.setState({\n            active : !this.props.active\n        })\n        todoStore.toggleTodo(event.target.getAttribute(\"todoid\"))\n    }\n\n    handleDestroyClick(event) {\n        todoStore.removeTodo(event.target.getAttribute(\"todoid\"))\n    }\n\n    render() {\n        return (\n            <li className={`${this.props.active ? \"\" : \"completed\"}`}>\n                <div className={\"view\"}>\n                    <input type={\"checkbox\"}\n                           className={\"toggle\"}\n                           todoid={`${this.props.todoid}`}\n                           checked={!this.props.active}\n                           onClick={event=>this.handleCheckBoxClick(event)}\n                    />\n                    <label>{this.props.title}</label>\n                    <button\n                        todoid= {`${this.props.todoid}`}\n                        className={\"destroy\"}\n                        onClick={event => this.handleDestroyClick(event)}\n                    />\n                </div>\n            </li>\n        );\n    }\n\n}\n\nexport default TodoItem","import React, {Component} from 'react'\nimport todoStore from \"../stores/TodoStore\";\nimport TodoItem from \"./TodoItem\"\nimport {observer} from 'mobx-react'\n\n@observer\nclass TodoList extends Component{\n\n    render() {\n        return (\n            <section className={\"main\"}>\n                <ul className={\"todo-list\"}>\n                    {\n                        todoStore.todos.map((todo)=>{\n                            return(\n                                <TodoItem active={todo.active} title={todo.title} todoid={todo.id}/>\n                            )\n                        })\n                    }\n                </ul>\n            </section>\n        );\n    }\n}\n\nexport default TodoList","import React, {Component} from 'react'\nimport todoStore from '../stores/TodoStore'\n\nclass TodoEntry extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value : ''\n        }\n        // Don't call this.setState() here!\n        this.state = { active : this.props.active };\n    }\n\n    handleKeyDown (e) {\n        if(e.keyCode !== 13) return;\n        if(!this.state.value) return;\n        e.preventDefault()\n        todoStore.addTodo(this.state.value)\n        this.setState({\n            value : ''\n        })\n    }\n\n    render() {\n        return (\n            <input\n                type={\"text\"}\n                className={\"new-todo\"}\n                placeholder={\"What need to be done?\"}\n                value = {this.state.value}\n                onChange={event => this.setState({value: event.target.value})}\n                onKeyDown={event => this.handleKeyDown(event) }\n            />\n        );\n    }\n}\n\nexport default TodoEntry","import React, {Component} from 'react'\nimport todoStore from '../stores/TodoStore'\nimport {observer} from \"mobx-react\";\n\n\n@observer\nclass TodoFooter extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n        }\n        this.changeMood = this.changeMood.bind(this);\n    }\n\n    changeMood(event) {\n        todoStore.changeMood(event.target.getAttribute(\"mood\"))\n    }\n\n    render() {\n            return (\n                <div className={\"footer\"}>\n                    <div className={\"todo-count\"}><strong> {todoStore.todos.length} </strong> items left</div>\n                    <div className={\"filters\"}>\n                        <li><a mood={todoStore.moods.ALL} className={`${ todoStore.mood === todoStore.moods.ALL ? \"selected\" : \"\"}`} onClick={event => this.changeMood(event)}>All</a></li>\n                        <li><a mood={todoStore.moods.ACTIVE} className={`${ todoStore.mood === todoStore.moods.ACTIVE ? \"selected\" : \"\"}`} onClick={event => this.changeMood(event)}>Active</a></li>\n                        <li><a mood={todoStore.moods.COMPLETED}  className={`${ todoStore.mood === todoStore.moods.COMPLETED ? \"selected\" : \"\"}`} onClick={event => this.changeMood(event)}>Completed</a></li>\n                    </div>\n                    <div className={\"clear-completed\"} onClick={()=>todoStore.clearCompleted()}>\n                        Clear completed\n                    </div>\n                </div>\n            )\n        }\n\n}\n\nexport default TodoFooter","import React, {Component} from 'react';\nimport {observer} from 'mobx-react'\nimport './App.css';\nimport TodoList from './components/TodoList'\nimport TodoEntry from \"./components/TodoEntry\";\nimport TodoFooter from \"./components/TodoFooter\";\n\n@observer\nclass App extends Component {\n    render() {\n        return (\n            <div className={\"todoapp\"} id={\"todoapp\"}>\n                <header className={\"header\"}>\n                    <h1>todo</h1>\n                    <TodoEntry />\n                </header>\n                <TodoList/>\n                <TodoFooter />\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}